#pragma once

namespace Keyboard
{
	enum Key
	{
		Unknown = -1,
		A = 0,
		B,
		C,
		D,
		E,
		F,
		G,
		H,
		I,
		J,
		K,
		L,
		M,
		N,
		O,
		P,
		Q,
		R,
		S,
		T,
		U,
		V,
		W,
		X,
		Y,
		Z,
		Num0,
		Num1,
		Num2,
		Num3,
		Num4,
		Num5,
		Num6,
		Num7,
		Num8,
		Num9,
		Escape,
		LControl,
		LShift,
		LAlt,
		LSystem,
		RControl,
		RShift,
		RAlt,
		RSystem,
		Menu,
		LBracket,
		RBracket,
		Semicolon,
		Comma,
		Period,
		Quote,
		Slash,
		Backslash,
		Tilde,
		Equal,
		Hyphen,
		Space,
		Enter,
		Backspace,
		Tab,
		PageUp,
		PageDown,
		End,
		Home,
		Insert,
		Delete,
		Add,
		Subtract,
		Multiply,
		Divide,
		Left,
		Right,
		Up,
		Down,
		Numpad0,
		Numpad1,
		Numpad2,
		Numpad3,
		Numpad4,
		Numpad5,
		Numpad6,
		Numpad7,
		Numpad8,
		Numpad9,
		F1,
		F2,
		F3,
		F4,
		F5,
		F6,
		F7,
		F8,
		F9,
		F10,
		F11,
		F12,
		F13,
		F14,
		F15,
		Pause
	};

	namespace
	{
		const std::string keyStrings[] =
		{
			"A",
			"B",
			"C",
			"D",
			"E",
			"F",
			"G",
			"H",
			"I",
			"J",
			"K",
			"L",
			"M",
			"N",
			"O",
			"P",
			"Q",
			"R",
			"S",
			"T",
			"U",
			"V",
			"W",
			"X",
			"Y",
			"Z",
			"Num0",
			"Num1",
			"Num2",
			"Num3",
			"Num4",
			"Num5",
			"Num6",
			"Num7",
			"Num8",
			"Num9",
			"Escape",
			"LControl",
			"LShift",
			"LAlt",
			"LSystem",
			"RControl",
			"RShift",
			"RAlt",
			"RSystem",
			"Menu",
			"LBracket",
			"RBracket",
			"Semicolon",
			"Comma",
			"Period",
			"Quote",
			"Slash",
			"Backslash",
			"Tilde",
			"Equal",
			"Hyphen",
			"Space",
			"Enter",
			"Backspace",
			"Tab",
			"PageUp",
			"PageDown",
			"End",
			"Home",
			"Insert",
			"Delete",
			"Add",
			"Subtract",
			"Multiply",
			"Divide",
			"Left",
			"Right",
			"Up",
			"Down",
			"Numpad0",
			"Numpad1",
			"Numpad2",
			"Numpad3",
			"Numpad4",
			"Numpad5",
			"Numpad6",
			"Numpad7",
			"Numpad8",
			"Numpad9",
			"F1",
			"F2",
			"F3",
			"F4",
			"F5",
			"F6",
			"F7",
			"F8",
			"F9",
			"F10",
			"F11",
			"F12",
			"F13",
			"F14",
			"F15",
			"Pause"
		};

		const std::size_t NUM_KEYS = sizeof(keyStrings) / sizeof(*keyStrings);
	}

	inline std::string GetKeyString(Key key)
	{
		return keyStrings[key];
	}

	inline Key GetKeyEnum(const std::string& keyStr)
	{
		for (std::size_t i = 0; i < NUM_KEYS; ++i)
		{
			if (keyStrings[i] == keyStr)
			{
				return static_cast<Key>(i);
			}
		}
		return static_cast<Key>(-1);
	}
}